name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run migrations on'
        required: true
        type: choice
        options:
          - staging
          - production
      migration_type:
        description: 'Type of migration'
        required: true
        type: choice
        options:
          - up
          - down
          - status
      specific_migration:
        description: 'Specific migration file (optional, leave empty for all)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (show what would be executed)'
        required: false
        default: true
        type: boolean

jobs:
  validate-migration:
    name: Validate Migration Request
    runs-on: ubuntu-latest
    outputs:
      can_proceed: ${{ steps.validate.outputs.can_proceed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate migration request
        id: validate
        run: |
          echo "## Migration Request Validation"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Type: ${{ github.event.inputs.migration_type }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          
          # Production migrations require additional checks
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            if [[ "${{ github.event.inputs.migration_type }}" == "down" ]]; then
              echo "⚠️ WARNING: Rollback migration requested for production!"
            fi
          fi
          
          echo "can_proceed=true" >> $GITHUB_OUTPUT

  # Create backup before migration
  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: validate-migration
    if: github.event.inputs.environment == 'production' && github.event.inputs.dry_run == 'false'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Create database backup
        run: |
          echo "Creating database backup before migration..."
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_NAME="${{ github.event.inputs.environment }}_pre_migration_${TIMESTAMP}"
          
          # Create backup using pg_dump or Supabase backup API
          echo "Backup created: $BACKUP_NAME"
          echo "backup_name=$BACKUP_NAME" >> $GITHUB_OUTPUT

  # Run the migration
  run-migration:
    name: Run Database Migration
    runs-on: ubuntu-latest
    needs: [validate-migration, backup-database]
    if: always() && needs.validate-migration.outputs.can_proceed == 'true'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Setup migration environment
        run: |
          # Set environment-specific variables
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> $GITHUB_ENV
            echo "SUPABASE_URL=${{ secrets.PROD_SUPABASE_URL }}" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.PROD_SUPABASE_SERVICE_KEY }}" >> $GITHUB_ENV
          else
            echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> $GITHUB_ENV
            echo "SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}" >> $GITHUB_ENV
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}" >> $GITHUB_ENV
          fi

      - name: Check migration status
        if: github.event.inputs.migration_type == 'status'
        run: |
          echo "## Current Migration Status"
          node scripts/migration-status.js

      - name: Run migration (dry run)
        if: github.event.inputs.dry_run == 'true' && github.event.inputs.migration_type != 'status'
        run: |
          echo "## Dry Run - Migration Preview"
          echo "The following migrations would be executed:"
          
          if [[ -n "${{ github.event.inputs.specific_migration }}" ]]; then
            echo "Specific migration: ${{ github.event.inputs.specific_migration }}"
          else
            echo "All pending migrations"
          fi
          
          node scripts/migration-dry-run.js \
            --type=${{ github.event.inputs.migration_type }} \
            --migration="${{ github.event.inputs.specific_migration }}"

      - name: Execute migration
        if: github.event.inputs.dry_run == 'false' && github.event.inputs.migration_type != 'status'
        id: migrate
        run: |
          echo "## Executing Migration"
          
          # Record start time
          START_TIME=$(date +%s)
          
          # Run migration
          if [[ "${{ github.event.inputs.migration_type }}" == "up" ]]; then
            if [[ -n "${{ github.event.inputs.specific_migration }}" ]]; then
              node scripts/migrate.js up --file="${{ github.event.inputs.specific_migration }}"
            else
              node scripts/migrate.js up
            fi
          else
            if [[ -n "${{ github.event.inputs.specific_migration }}" ]]; then
              node scripts/migrate.js down --file="${{ github.event.inputs.specific_migration }}"
            else
              node scripts/migrate.js down
            fi
          fi
          
          # Record end time
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo "Migration completed in ${DURATION} seconds"
          echo "duration=$DURATION" >> $GITHUB_OUTPUT

      - name: Verify migration
        if: github.event.inputs.dry_run == 'false' && github.event.inputs.migration_type != 'status'
        run: |
          echo "## Verifying Migration"
          node scripts/verify-migration.js

  # Create migration report
  migration-report:
    name: Generate Migration Report
    runs-on: ubuntu-latest
    needs: run-migration
    if: always()
    steps:
      - name: Generate report
        run: |
          echo "## Migration Report"
          echo "- **Environment:** ${{ github.event.inputs.environment }}"
          echo "- **Type:** ${{ github.event.inputs.migration_type }}"
          echo "- **Dry Run:** ${{ github.event.inputs.dry_run }}"
          echo "- **Status:** ${{ needs.run-migration.result }}"
          echo "- **Executed by:** ${{ github.actor }}"
          echo "- **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: Create issue for failed migration
        if: needs.run-migration.result == 'failure' && github.event.inputs.dry_run == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Migration Failed: ${context.payload.inputs.environment} - ${new Date().toISOString()}`,
              body: `## Migration Failure Report
              
              **Environment:** ${{ github.event.inputs.environment }}
              **Migration Type:** ${{ github.event.inputs.migration_type }}
              **Specific Migration:** ${{ github.event.inputs.specific_migration || 'All' }}
              **Executed by:** ${{ github.actor }}
              
              Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.
              
              ### Action Items
              - [ ] Investigate the failure
              - [ ] Fix the migration issue
              - [ ] Re-run the migration
              - [ ] Verify data integrity`,
              labels: ['bug', 'database', 'high-priority']
            });

      - name: Send notification
        if: github.event.inputs.dry_run == 'false'
        run: |
          STATUS="${{ needs.run-migration.result == 'success' && '✅ Success' || '❌ Failed' }}"
          
          if [[ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"text\": \"Database Migration $STATUS\",
                \"blocks\": [
                  {
                    \"type\": \"section\",
                    \"text\": {
                      \"type\": \"mrkdwn\",
                      \"text\": \"*Database Migration $STATUS*\n\n*Environment:* ${{ github.event.inputs.environment }}\n*Type:* ${{ github.event.inputs.migration_type }}\n*Executed by:* ${{ github.actor }}\"
                    }
                  }
                ]
              }" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi