name: PR Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8'

jobs:
  # Job to check code formatting and linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        working-directory: apps/web

      - name: Check code formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  # Job to run type checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run typecheck

  # Job to run unit tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    env:
      # Supabase test environment
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
      # Other test environment variables
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      NEXTAUTH_SECRET: test-secret-key-for-ci
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage
        working-directory: apps/web

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: apps/web/coverage/
          retention-days: 7

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('apps/web/coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const comment = `## Test Coverage Report ðŸ“Š
            
            | Metric | Coverage |
            |--------|----------|
            | Statements | ${total.statements.pct}% |
            | Branches | ${total.branches.pct}% |
            | Functions | ${total.functions.pct}% |
            | Lines | ${total.lines.pct}% |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job to run integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: coldcopy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/coldcopy_test
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
      NEXTAUTH_SECRET: test-secret-key-for-ci
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: npm run test:db:setup
        working-directory: apps/web

      - name: Run integration tests
        run: npm run test:integration
        working-directory: apps/web

      - name: Cleanup test database
        if: always()
        run: npm run test:db:clean
        working-directory: apps/web

  # Job to check build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          SKIP_ENV_VALIDATION: true

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          npx next-bundle-analyzer

  # Job to run security checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run security scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Job to validate database migrations
  db-migrations:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: coldcopy_migrations
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Validate migrations can run
        run: |
          echo "Testing database migrations..."
          # Add migration validation logic here
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/coldcopy_migrations

  # Job to check PR description and commits
  pr-check:
    name: PR Standards Check
    runs-on: ubuntu-latest
    steps:
      - name: Check PR has description
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr.body || pr.body.trim().length < 50) {
              core.setFailed('PR description must be at least 50 characters long');
            }

      - name: Check commit messages
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          echo "Checking commit message format..."
          # Simple check for conventional commits
          git log --format="%s" origin/${{ github.base_ref }}..HEAD | while read commit; do
            if ! echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
              echo "Invalid commit message: $commit"
              echo "Please use conventional commit format: type(scope): description"
              exit 1
            fi
          done

  # Final job to ensure all checks pass
  pr-validation-complete:
    name: PR Validation Complete
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test-unit, test-integration, build, security, db-migrations, pr-check]
    steps:
      - name: All checks passed
        run: echo "âœ… All PR validation checks passed successfully!"