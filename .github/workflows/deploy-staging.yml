name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend services'
        required: false
        default: true
        type: boolean
      run_migrations:
        description: 'Run database migrations'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Run tests before deployment
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        working-directory: apps/web
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}

  # Deploy frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: staging
      url: https://staging.coldcopy.cc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_APP_URL: https://staging.coldcopy.cc
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STAGING_STRIPE_PUBLISHABLE_KEY }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          vercel alias set $DEPLOYMENT_URL staging.coldcopy.cc --token=${{ secrets.VERCEL_TOKEN }}

      - name: Comment deployment URL on commit
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `üöÄ Staging deployment successful!\n\nURL: ${{ steps.deploy.outputs.deployment_url }}`
            });

  # Run database migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.run_migrations != 'false'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run migrations
        run: |
          echo "Running database migrations..."
          # Create migration script
          node -e "
          const { createClient } = require('@supabase/supabase-js');
          const fs = require('fs');
          const path = require('path');
          
          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
          );
          
          async function runMigrations() {
            const migrationsDir = path.join(__dirname, 'supabase/migrations');
            const files = fs.readdirSync(migrationsDir).sort();
            
            for (const file of files) {
              if (file.endsWith('.sql')) {
                console.log(\`Running migration: \${file}\`);
                const sql = fs.readFileSync(path.join(migrationsDir, file), 'utf8');
                const { error } = await supabase.rpc('exec_sql', { sql });
                if (error) {
                  console.error(\`Migration failed: \${file}\`, error);
                  process.exit(1);
                }
              }
            }
            console.log('All migrations completed successfully');
          }
          
          runMigrations();
          "
        env:
          SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}

  # Deploy backend services (placeholder for FastAPI deployment)
  deploy-backend:
    name: Deploy Backend Services
    runs-on: ubuntu-latest
    needs: [test, migrate-database]
    if: github.event.inputs.deploy_backend != 'false'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Digital Ocean
        run: |
          echo "Backend deployment would happen here"
          echo "This is a placeholder for FastAPI deployment to Digital Ocean"
          # Add actual deployment steps when backend is ready

  # Run E2E tests on staging
  e2e-tests:
    name: Run E2E Tests on Staging
    runs-on: ubuntu-latest
    needs: [deploy-frontend, migrate-database]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: apps/web

      - name: Run E2E tests
        run: npm run test:e2e
        working-directory: apps/web
        env:
          BASE_URL: https://staging.coldcopy.cc
          E2E_USER_EMAIL: ${{ secrets.STAGING_E2E_USER_EMAIL }}
          E2E_USER_PASSWORD: ${{ secrets.STAGING_E2E_USER_PASSWORD }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

  # Send deployment notification
  notify-deployment:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-frontend, e2e-tests]
    if: always()
    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.e2e-tests.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"Staging Deployment $STATUS\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Staging Deployment $STATUS*\n\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*URL:* https://staging.coldcopy.cc\"
                  }
                }
              ]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}