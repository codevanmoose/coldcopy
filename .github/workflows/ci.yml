name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8'

jobs:
  # Detect changes to optimize CI runs
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      database: ${{ steps.filter.outputs.database }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/web/**'
              - 'packages/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            backend:
              - 'apps/api/**'
              - 'requirements.txt'
              - 'pyproject.toml'
            database:
              - 'supabase/migrations/**'
              - 'supabase/seed.sql'
            docs:
              - '**/*.md'
              - 'docs/**'

  # Frontend Tests
  frontend-test:
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Type check
        run: pnpm typecheck
      
      - name: Lint
        run: pnpm lint
      
      - name: Unit tests
        run: pnpm test:unit
        env:
          CI: true
      
      - name: Build
        run: pnpm build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: apps/web/.next
          retention-days: 7

  # Backend Tests
  backend-test:
    needs: changes
    if: needs.changes.outputs.backend == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: coldcopy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd apps/api
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Type check with mypy
        run: |
          cd apps/api
          python -m mypy .
      
      - name: Lint with ruff
        run: |
          cd apps/api
          python -m ruff check .
      
      - name: Format check with black
        run: |
          cd apps/api
          python -m black --check .
      
      - name: Run tests
        run: |
          cd apps/api
          python -m pytest -v --cov=. --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/coldcopy_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: apps/api/coverage.xml
          flags: backend

  # Database Tests
  database-test:
    needs: changes
    if: needs.changes.outputs.database == 'true' || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: supabase/postgres:15.1.0.117
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Supabase CLI
        run: |
          wget -qO- https://github.com/supabase/cli/releases/download/v1.123.0/supabase_linux_amd64.tar.gz | tar xvz
          sudo mv supabase /usr/local/bin/
      
      - name: Run migrations
        run: |
          cd supabase
          for file in migrations/*.sql; do
            echo "Running migration: $file"
            PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -f "$file"
          done
      
      - name: Verify schema
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "\dt"
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "\df"

  # E2E Tests
  e2e-test:
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Install Playwright
        run: pnpm exec playwright install --with-deps
      
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: e2e/test-results
          retention-days: 7

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: |
          cd apps/web
          npm audit --production
        continue-on-error: true
      
      - name: Run pip audit
        run: |
          cd apps/api
          pip install pip-audit
          pip-audit
        continue-on-error: true

  # Build Docker Images
  build-images:
    needs: [frontend-test, backend-test, database-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [web, api]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/coldcopy-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/coldcopy-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # All tests passed
  ci-success:
    needs: [frontend-test, backend-test, database-test, e2e-test, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.frontend-test.result }}" != "success" ]] || \
             [[ "${{ needs.backend-test.result }}" != "success" ]] || \
             [[ "${{ needs.database-test.result }}" != "success" ]] || \
             [[ "${{ needs.e2e-test.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All jobs passed!"