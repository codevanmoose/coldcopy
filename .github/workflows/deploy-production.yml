name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.2.3)'
        required: true
        type: string
      deploy_frontend:
        description: 'Deploy frontend to Vercel'
        required: false
        default: true
        type: boolean
      deploy_backend:
        description: 'Deploy backend services'
        required: false
        default: true
        type: boolean
      run_migrations:
        description: 'Run database migrations'
        required: false
        default: true
        type: boolean
      skip_health_checks:
        description: 'Skip post-deployment health checks'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Validate deployment parameters
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version tag
        id: check
        run: |
          # Check if version tag exists
          if ! git rev-parse "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "‚ùå Version tag ${{ github.event.inputs.version }} does not exist"
            exit 1
          fi
          
          # Check if this is a valid semver
          if ! echo "${{ github.event.inputs.version }}" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "‚ùå Version must be in format vX.Y.Z"
            exit 1
          fi
          
          echo "‚úÖ Version ${{ github.event.inputs.version }} is valid"
          echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Generate deployment plan
        run: |
          echo "## üìã Deployment Plan"
          echo "- **Version:** ${{ github.event.inputs.version }}"
          echo "- **Deploy Frontend:** ${{ github.event.inputs.deploy_frontend }}"
          echo "- **Deploy Backend:** ${{ github.event.inputs.deploy_backend }}"
          echo "- **Run Migrations:** ${{ github.event.inputs.run_migrations }}"
          echo "- **Skip Health Checks:** ${{ github.event.inputs.skip_health_checks }}"

  # Run comprehensive tests
  test-suite:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run all tests
        run: |
          npm run lint
          npm run typecheck
          npm run test:coverage
        working-directory: apps/web

  # Manual approval gate
  approval:
    name: Deployment Approval
    runs-on: ubuntu-latest
    needs: [validate, test-suite]
    environment: production-approval
    steps:
      - name: Request deployment approval
        run: |
          echo "üö¶ Waiting for manual approval to deploy to production..."
          echo "Version: ${{ github.event.inputs.version }}"

  # Create database backup before deployment
  backup-database:
    name: Backup Production Database
    runs-on: ubuntu-latest
    needs: approval
    environment: production
    steps:
      - name: Create database backup
        run: |
          echo "Creating production database backup..."
          # Add actual backup logic here
          BACKUP_NAME="coldcopy-prod-backup-$(date +%Y%m%d-%H%M%S)"
          echo "Backup created: $BACKUP_NAME"

  # Run database migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: backup-database
    if: github.event.inputs.run_migrations == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run migrations with rollback capability
        run: |
          echo "Running production database migrations..."
          # Add migration logic with rollback capability
        env:
          SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.PROD_SUPABASE_SERVICE_KEY }}

  # Deploy frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: [approval, migrate-database]
    if: github.event.inputs.deploy_frontend == 'true'
    environment:
      name: production
      url: https://coldcopy.cc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Build and Deploy to Vercel
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          NEXT_PUBLIC_APP_URL: https://coldcopy.cc
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.PROD_STRIPE_PUBLISHABLE_KEY }}

  # Deploy backend services
  deploy-backend:
    name: Deploy Backend to Production
    runs-on: ubuntu-latest
    needs: [approval, migrate-database]
    if: github.event.inputs.deploy_backend == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Deploy to Digital Ocean
        run: |
          echo "Deploying backend services to production..."
          # Add actual deployment steps

  # Run health checks
  health-checks:
    name: Post-Deployment Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.event.inputs.skip_health_checks != 'true'
    steps:
      - name: Check frontend health
        run: |
          echo "Checking frontend health..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://coldcopy.cc)
          if [ $response -ne 200 ]; then
            echo "‚ùå Frontend health check failed with status $response"
            exit 1
          fi
          echo "‚úÖ Frontend is healthy"

      - name: Check API health
        run: |
          echo "Checking API health..."
          # Add API health check

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add smoke test logic

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: health-checks
    if: failure()
    environment: production
    steps:
      - name: Rollback frontend
        if: github.event.inputs.deploy_frontend == 'true'
        run: |
          echo "‚ö†Ô∏è Rolling back frontend deployment..."
          # Add rollback logic

      - name: Rollback database
        if: github.event.inputs.run_migrations == 'true'
        run: |
          echo "‚ö†Ô∏è Rolling back database migrations..."
          # Add rollback logic

      - name: Notify rollback
        run: |
          echo "üîÑ Deployment rolled back due to health check failures"

  # Create release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: health-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog..."
          # Generate changelog between current and previous version
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body: |
            ## üöÄ Production Deployment
            
            **Version:** ${{ github.event.inputs.version }}
            **Date:** ${{ github.event.repository.updated_at }}
            
            ### Deployment Details
            - Frontend: ${{ github.event.inputs.deploy_frontend == 'true' && '‚úÖ Deployed' || '‚è≠Ô∏è Skipped' }}
            - Backend: ${{ github.event.inputs.deploy_backend == 'true' && '‚úÖ Deployed' || '‚è≠Ô∏è Skipped' }}
            - Migrations: ${{ github.event.inputs.run_migrations == 'true' && '‚úÖ Applied' || '‚è≠Ô∏è Skipped' }}
            
            ### Changelog
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  # Send notifications
  notify:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [health-checks, create-release]
    if: always()
    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.health-checks.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}"
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"Production Deployment $STATUS\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Production Deployment $STATUS*\n\n*Version:* ${{ github.event.inputs.version }}\n*URL:* https://coldcopy.cc\n*Deployed by:* ${{ github.actor }}\"
                  }
                }
              ]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        run: |
          echo "Sending deployment notification emails..."
          # Add email notification logic